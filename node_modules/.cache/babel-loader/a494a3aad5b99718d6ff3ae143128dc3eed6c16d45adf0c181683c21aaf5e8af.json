{"ast":null,"code":"var _jsxFileName = \"/home/moringa/Development/code/phase-2/bot-redone/src/components/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport BotSpecs from \"./BotSpecs\";\nimport BotCollection from \"./BotCollection\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport FilterBar from \"./FilterBar\";\nimport SortBar from \"./SortBar\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  // const [bots, setBots] = useState([]);\n  // const [selectedBots, setSelectedBots] = useState([]);\n  // const [filteredBots, setFilteredBots] = useState([]);\n  // const [sortConfig, setSortConfig] = useState({ key: \"health\", direction: 1 });\n\n  // useEffect(() => {\n  //   fetch(\"http://localhost:3000/bots\")\n  //     .then((res) => res.json())\n  //     .then((data) => setBots(data));\n  // }, []);\n\n  // useEffect(() => {\n  //   setFilteredBots(\n  //     bots.filter((bot) => {\n  //       return bot.health >= sortConfig.healthRange[0] && bot.health <= sortConfig.healthRange[1];\n  //     })\n  //   );\n  // }, [bots, sortConfig]);\n\n  // const handleAddBot = (bot) => {\n  //   if (!selectedBots.find((b) => b.id === bot.id)) {\n  //     setSelectedBots([...selectedBots, bot]);\n  //   }\n  // };\n\n  // const handleReleaseBot = (id) => {\n  //   setSelectedBots(selectedBots.filter((bot) => bot.id !== id));\n  // };\n\n  // const handleDischargeBot = () => {\n  //   setSelectedBots([]);\n  // };\n\n  // const handleSort = (key) => {\n  //   let direction = sortConfig.direction;\n  //   if (sortConfig.key === key) {\n  //     direction = sortConfig.direction * -1;\n  //   }\n  //   setSortConfig({ key, direction });\n  // };\n\n  // const handleFilter = (min, max) => {\n  //   setSortConfig({ ...sortConfig, healthRange: [min, max] });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: \"Bot Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortBar, {\n      onSort: handleSort\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: filteredBots,\n      onAddBot: handleAddBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotSpecs, {\n      selectedBots: selectedBots\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YourBotArmy, {\n      bots: selectedBots,\n      onRelease: handleReleaseBot,\n      onDischarge: handleDischargeBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), \" */}\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotSpecs","BotCollection","YourBotArmy","FilterBar","SortBar","App","handleSort","filteredBots","handleAddBot","selectedBots","handleReleaseBot","handleDischargeBot"],"sources":["/home/moringa/Development/code/phase-2/bot-redone/src/components/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport BotSpecs from \"./BotSpecs\";\nimport BotCollection from \"./BotCollection\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport FilterBar from \"./FilterBar\";\nimport SortBar from \"./SortBar\";\nimport \"./App.css\";\n\nconst App = () => {\n  // const [bots, setBots] = useState([]);\n  // const [selectedBots, setSelectedBots] = useState([]);\n  // const [filteredBots, setFilteredBots] = useState([]);\n  // const [sortConfig, setSortConfig] = useState({ key: \"health\", direction: 1 });\n\n  // useEffect(() => {\n  //   fetch(\"http://localhost:3000/bots\")\n  //     .then((res) => res.json())\n  //     .then((data) => setBots(data));\n  // }, []);\n\n  // useEffect(() => {\n  //   setFilteredBots(\n  //     bots.filter((bot) => {\n  //       return bot.health >= sortConfig.healthRange[0] && bot.health <= sortConfig.healthRange[1];\n  //     })\n  //   );\n  // }, [bots, sortConfig]);\n\n  // const handleAddBot = (bot) => {\n  //   if (!selectedBots.find((b) => b.id === bot.id)) {\n  //     setSelectedBots([...selectedBots, bot]);\n  //   }\n  // };\n\n  // const handleReleaseBot = (id) => {\n  //   setSelectedBots(selectedBots.filter((bot) => bot.id !== id));\n  // };\n\n  // const handleDischargeBot = () => {\n  //   setSelectedBots([]);\n  // };\n\n  // const handleSort = (key) => {\n  //   let direction = sortConfig.direction;\n  //   if (sortConfig.key === key) {\n  //     direction = sortConfig.direction * -1;\n  //   }\n  //   setSortConfig({ key, direction });\n  // };\n\n  // const handleFilter = (min, max) => {\n  //   setSortConfig({ ...sortConfig, healthRange: [min, max] });\n  // };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Bot Management System</h1>\n      {/* {/* <FilterBar onFilter={handleFilter} /> */}\n      <SortBar onSort={handleSort} />\n      <BotCollection bots={filteredBots} onAddBot={handleAddBot} />\n      <BotSpecs selectedBots={selectedBots} />\n      <YourBotArmy bots={selectedBots} onRelease={handleReleaseBot} onDischarge={handleDischargeBot} /> */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,WAAW;AAAC;AAEnB,MAAMC,GAAG,GAAG,MAAM;EAChB;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAI,SAAS,EAAC,QAAQ;MAAA,UAAC;IAAqB;MAAA;MAAA;MAAA;IAAA,QAAK,eAEjD,QAAC,OAAO;MAAC,MAAM,EAAEC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAG,eAC/B,QAAC,aAAa;MAAC,IAAI,EAAEC,YAAa;MAAC,QAAQ,EAAEC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG,eAC7D,QAAC,QAAQ;MAAC,YAAY,EAAEC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG,eACxC,QAAC,WAAW;MAAC,IAAI,EAAEA,YAAa;MAAC,SAAS,EAAEC,gBAAiB;MAAC,WAAW,EAAEC;IAAmB;MAAA;MAAA;MAAA;IAAA,QAAG,QACnG;EAAA;IAAA;IAAA;IAAA;EAAA,QAAM;AAEV,CAAC;AAAC,KAxDIN,GAAG;AA0DT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}