{"ast":null,"code":"var _jsxFileName = \"/home/moringa/Development/code/phase-2/bot-redone/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../\";\nimport BotCollection from \"./BotCollection\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport FilterBar from \"./FilterBar\";\nimport SortBar from \"./SortBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [selectedBots, setSelectedBots] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(false);\n  const [selectedBot, setSelectedBot] = useState({});\n  useEffect(() => {\n    fetch(\"http://localhost:3000/bots\").then(res => res.json()).then(data => setBots(data));\n  }, []);\n  const handleSelectBot = bot => {\n    setSelectedBot(bot);\n    setShowBotSpecs(true);\n  };\n  const handleEnlistBot = bot => {\n    const alreadySelected = selectedBots.find(b => b.id === bot.id);\n    if (!alreadySelected) {\n      setSelectedBots([...selectedBots, bot]);\n    }\n  };\n  const handleReleaseBot = bot => {\n    setSelectedBots(selectedBots.filter(b => b.id !== bot.id));\n  };\n  const handleDischargeBot = bot => {\n    setSelectedBots(selectedBots.filter(b => b.id !== bot.id));\n    setBots(bots.filter(b => b.id !== bot.id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bot Army Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), showBotSpecs ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: selectedBot,\n      onBack: () => setShowBotSpecs(false),\n      onEnlist: () => handleEnlistBot(selectedBot)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(BotCollection, {\n        bots: bots,\n        onSelectBot: handleSelectBot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YourBotArmy, {\n        bots: selectedBots,\n        onRelease: handleReleaseBot,\n        onDischarge: handleDischargeBot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IJTfrgceTfDGKPOya4sJpEOCtFY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotCollection","YourBotArmy","FilterBar","SortBar","App","bots","setBots","selectedBots","setSelectedBots","showBotSpecs","setShowBotSpecs","selectedBot","setSelectedBot","fetch","then","res","json","data","handleSelectBot","bot","handleEnlistBot","alreadySelected","find","b","id","handleReleaseBot","filter","handleDischargeBot"],"sources":["/home/moringa/Development/code/phase-2/bot-redone/src/components/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../\";\nimport BotCollection from \"./BotCollection\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport FilterBar from \"./FilterBar\";\nimport SortBar from \"./SortBar\";\n\nfunction App() {\n  const [bots, setBots] = useState([]);\n  const [selectedBots, setSelectedBots] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(false);\n  const [selectedBot, setSelectedBot] = useState({});\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/bots\")\n      .then(res => res.json())\n      .then(data => setBots(data));\n  }, []);\n\n  const handleSelectBot = bot => {\n    setSelectedBot(bot);\n    setShowBotSpecs(true);\n  };\n\n  const handleEnlistBot = bot => {\n    const alreadySelected = selectedBots.find(b => b.id === bot.id);\n    if (!alreadySelected) {\n      setSelectedBots([...selectedBots, bot]);\n    }\n  };\n\n  const handleReleaseBot = bot => {\n    setSelectedBots(selectedBots.filter(b => b.id !== bot.id));\n  };\n\n  const handleDischargeBot = bot => {\n    setSelectedBots(selectedBots.filter(b => b.id !== bot.id));\n    setBots(bots.filter(b => b.id !== bot.id));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Bot Army Manager</h1>\n      <FilterBar />\n      <SortBar />\n      {showBotSpecs ? (\n        <BotSpecs\n          bot={selectedBot}\n          onBack={() => setShowBotSpecs(false)}\n          onEnlist={() => handleEnlistBot(selectedBot)}\n        />\n      ) : (\n        <>\n          <BotCollection bots={bots} onSelectBot={handleSelectBot} />\n          <YourBotArmy bots={selectedBots} onRelease={handleReleaseBot} onDischarge={handleDischargeBot} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}