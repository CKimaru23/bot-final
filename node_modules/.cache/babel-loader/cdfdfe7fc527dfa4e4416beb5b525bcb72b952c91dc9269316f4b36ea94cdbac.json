{"ast":null,"code":"var _jsxFileName = \"/home/moringa/Development/code/phase-2/bot-redone/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport BotSpecs from \"./BotSpecs\";\nimport BotCollection from \"./BotCollection\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport FilterBar from \"./FilterBar\";\nimport SortBar from \"./SortBar\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [selectedBots, setSelectedBots] = useState([]);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [sortConfig, setSortConfig] = useState({\n    key: \"health\",\n    direction: 1\n  });\n  useEffect(() => {\n    fetch(\"http://localhost:3000/bots\").then(res => res.json()).then(data => {\n      setBots(data);\n    });\n  }, []);\n  useEffect(() => {\n    setFilteredBots(bots.filter(bot => {\n      return bot.health >= sortConfig.healthRange[0] && bot.health <= sortConfig.healthRange[1];\n    }));\n  }, [bots, sortConfig]);\n  const handleAddBot = bot => {\n    if (!selectedBots.find(b => b.id === bot.id)) {\n      setSelectedBots([...selectedBots, bot]);\n    }\n  };\n  const handleReleaseBot = id => {\n    setSelectedBots(selectedBots.filter(bot => bot.id !== id));\n  };\n  const handleDischargeBot = () => {\n    setSelectedBots([]);\n  };\n  const handleSort = key => {\n    let direction = sortConfig.direction;\n    if (sortConfig.key === key) {\n      direction = sortConfig.direction * -1;\n    }\n    setSortConfig({\n      key,\n      direction\n    });\n  };\n  const handleFilter = (min, max) => {\n    setSortConfig({\n      ...sortConfig,\n      healthRange: [min, max]\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: \"Bot Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      onFilter: handleFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortBar, {\n      onSort: handleSort\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: filteredBots,\n      onAddBot: handleAddBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YourBotArmy, {\n      bots: selectedBots,\n      onRelease: handleReleaseBot,\n      onDischarge: handleDischargeBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"HTTwWXCnXewlKGSfI+8DGnoywoA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotSpecs","BotCollection","YourBotArmy","FilterBar","SortBar","App","bots","setBots","selectedBots","setSelectedBots","filteredBots","setFilteredBots","sortConfig","setSortConfig","key","direction","fetch","then","res","json","data","filter","bot","health","healthRange","handleAddBot","find","b","id","handleReleaseBot","handleDischargeBot","handleSort","handleFilter","min","max"],"sources":["/home/moringa/Development/code/phase-2/bot-redone/src/components/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport BotSpecs from \"./BotSpecs\";\nimport BotCollection from \"./BotCollection\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport FilterBar from \"./FilterBar\";\nimport SortBar from \"./SortBar\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [bots, setBots] = useState([]);\n  const [selectedBots, setSelectedBots] = useState([]);\n  const [filteredBots, setFilteredBots] = useState([]);\n  const [sortConfig, setSortConfig] = useState({ key: \"health\", direction: 1 });\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/bots\")\n      .then((res) => res.json())\n      .then((data) => {\n        \n        setBots(data)});\n  }, []);\n\n  useEffect(() => {\n    setFilteredBots(\n      bots.filter((bot) => {\n        return bot.health >= sortConfig.healthRange[0] && bot.health <= sortConfig.healthRange[1];\n      })\n    );\n  }, [bots, sortConfig]);\n\n  const handleAddBot = (bot) => {\n    if (!selectedBots.find((b) => b.id === bot.id)) {\n      setSelectedBots([...selectedBots, bot]);\n    }\n  };\n\n  const handleReleaseBot = (id) => {\n    setSelectedBots(selectedBots.filter((bot) => bot.id !== id));\n  };\n\n  const handleDischargeBot = () => {\n    setSelectedBots([]);\n  };\n\n  const handleSort = (key) => {\n    let direction = sortConfig.direction;\n    if (sortConfig.key === key) {\n      direction = sortConfig.direction * -1;\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const handleFilter = (min, max) => {\n    setSortConfig({ ...sortConfig, healthRange: [min, max] });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Bot Management System</h1>\n      <FilterBar onFilter={handleFilter} />\n      <SortBar onSort={handleSort} />\n      <BotCollection bots={filteredBots} onAddBot={handleAddBot} />\n      {/* <BotSpecs selectedBots={selectedBots} /> */}\n      <YourBotArmy bots={selectedBots} onRelease={handleReleaseBot} onDischarge={handleDischargeBot} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}